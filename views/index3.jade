extends layout

block content
  .streamgraph
  script(type='text/javascript').
    var initialized = false;
    socket.on('updateMindwave', function (data) {
      if (data['blinkStrength'] == null && data['poorSignalLevel'] < 100) {
        //- console.log(data);
        waveData = data;
        transition(waveData);
        blinking = false;
        initialized = true;
      } 
      else if (initialized == true &&  data['poorSignalLevel'] < 100) {
        transition(waveData);
        blinking = data['blinkStrength'];
      }
      else {
        console.log('asdf');
        //- transition(waveData);

        blinking = data['blinkStrength'];
      }

    });

    setInterval(function(){transition(waveData)},1000);

    var n = 8, // number of layers
        m = 300, // number of samples per layer
        buffer = 3,  //number of unique data points to collect (and then curve between)
        resolution = 5,  //number points to add in between buffered values
        cur_buffer = 0,
        data_buffer = {},
        stack = d3.layout.stack().offset("wiggle"),
        layers = stack(d3.range(n).map(function() { return bumpLayer(m); }))
        


    var width = $(".streamgraph").width(),
        height = $(".streamgraph").height();

    var x = d3.scale.linear()
        .domain([0, m - 1])
        .range([0, width]);

    var y = d3.scale.linear()
        .domain([0, d3.max(layers, function(layer) { return d3.max(layer, function(d) { return d.y0 + d.y; }); })])
        //- .domain([-300000, 300000])
        .range([height, 0]);

    var color = d3.scale.linear()
        .range(["#B2EEF1", "#696C86"]);

    var color2 = d3.scale.linear()
        .range(["#000", "#fff"]);

    var area = d3.svg.area()
        .x(function(d) { return x(d.x); })
        .y0(function(d) { return y(d.y0); })
        .y1(function(d) { return y(d.y0 + d.y); });

    var svg = d3.select(".streamgraph").append("svg")
        .attr("width", width)
        .attr("height", height);

    svg.selectAll("path")
        .data(layers)
      .enter().append("path")
        .attr("d", area)
        .style("fill", function() { return color(Math.random()); });

    function transition(waveData) {
      if (typeof data_buffer[0] == 'undefined') {
        data_buffer[0] = waveData;
      }

      
      fx = layers[0].length-1;

      if (cur_buffer < buffer) {
        if (data_buffer[cur_buffer]['eegPower'] != waveData['eegPower']) {
          var tween_from = data_buffer[cur_buffer];
          var tween_to = waveData;
          var waveData2 = jQuery.extend(true, {}, waveData);
          
          for (var i=0; i<resolution; i++) {
            // set the scale for interpolation
            scaled = d3.scale.pow().exponent(2) 
              .domain([0, resolution])
              .range([tween_from['eegPower']['delta'], tween_to['eegPower']['delta']]);

            
            waveData2['eegPower']['delta'] = scaled(i);

            scaled.range([tween_from['eegPower']['theta'], tween_to['eegPower']['theta']]);
            waveData2['eegPower']['theta'] = scaled(i);

            scaled.range([tween_from['eegPower']['lowAlpha'], tween_to['eegPower']['lowAlpha']]);
            waveData2['eegPower']['lowAlpha'] = scaled(i);

            scaled.range([tween_from['eegPower']['highAlpha'], tween_to['eegPower']['highAlpha']]);
            waveData2['eegPower']['highAlpha'] = scaled(i);

            scaled.range([tween_from['eegPower']['lowBeta'], tween_to['eegPower']['lowBeta']]);
            waveData2['eegPower']['lowBeta'] = scaled(i);

            scaled.range([tween_from['eegPower']['highBeta'], tween_to['eegPower']['highBeta']]);
            waveData2['eegPower']['highBeta'] = scaled(i);

            scaled.range([tween_from['eegPower']['lowGamma'], tween_to['eegPower']['lowGamma']]);
            waveData2['eegPower']['lowGamma'] = scaled(i);

            scaled.range([tween_from['eegPower']['highGamma'], tween_to['eegPower']['highGamma']]);
            waveData2['eegPower']['highGamma'] = scaled(i);

            data_buffer[i+cur_buffer] = waveData2;
          }
          cur_buffer++;
        }
      } else {
        cur_buffer = 0;
        
        //- //iterate through the buffered data
        for (var bx=0; bx<Object.keys(data_buffer).length; bx++) {

          //- layers[0].push({"x" : fx, 'y' : data_buffer[bx]['eegPower']['delta'],         'y0' : -data_buffer[bx]['eegPower']['theta']});
          //- layers[1].push({"x" : fx, 'y' : data_buffer[bx]['eegPower']['theta'],         'y0' : -data_buffer[bx]['eegPower']['lowAlpha']});
          //- layers[2].push({"x" : fx, 'y' : data_buffer[bx]['eegPower']['lowAlpha'],      'y0' : -data_buffer[bx]['eegPower']['highAlpha']});
          //- layers[3].push({"x" : fx, 'y' : data_buffer[bx]['eegPower']['highAlpha'],     'y0' : -data_buffer[bx]['eegPower']['lowBeta']});
          //- layers[4].push({"x" : fx, 'y' : data_buffer[bx]['eegPower']['lowBeta'],       'y0' : -data_buffer[bx]['eegPower']['highBeta']});
          //- layers[5].push({"x" : fx, 'y' : data_buffer[bx]['eegPower']['highBeta'],      'y0' : -data_buffer[bx]['eegPower']['lowGamma']});
          //- layers[6].push({"x" : fx, 'y' : data_buffer[bx]['eegPower']['lowGamma'],      'y0' : -data_buffer[bx]['eegPower']['highGamma']});
          //- layers[7].push({"x" : fx, 'y' : data_buffer[bx]['eegPower']['highGamma'],     'y0' : -data_buffer[bx]['eegPower']['highGamma']});
          
          layers[0].push({"x" : fx, 'y' : data_buffer[bx]['eegPower']['delta'],         'y0' : -data_buffer[bx]['eegPower']['theta']});
          layers[1].push({"x" : fx, 'y' : data_buffer[bx]['eegPower']['theta'],         'y0' : -data_buffer[bx]['eegPower']['lowAlpha']});
          layers[2].push({"x" : fx, 'y' : data_buffer[bx]['eegPower']['lowAlpha'],      'y0' : -data_buffer[bx]['eegPower']['highAlpha']});
          layers[3].push({"x" : fx, 'y' : data_buffer[bx]['eegPower']['highAlpha'],     'y0' : -data_buffer[bx]['eegPower']['lowBeta']});
          layers[4].push({"x" : fx, 'y' : data_buffer[bx]['eegPower']['lowBeta'],       'y0' : -data_buffer[bx]['eegPower']['highBeta']});
          layers[5].push({"x" : fx, 'y' : data_buffer[bx]['eegPower']['highBeta'],      'y0' : -data_buffer[bx]['eegPower']['lowGamma']});
          layers[6].push({"x" : fx, 'y' : data_buffer[bx]['eegPower']['lowGamma'],      'y0' : -data_buffer[bx]['eegPower']['highGamma']});
          layers[7].push({"x" : fx, 'y' : data_buffer[bx]['eegPower']['highGamma'],     'y0' : -data_buffer[bx]['eegPower']['highGamma']});

          //shift the data through
          for (var lx=0; lx<n; lx++) {
            for (var wx=0; wx<layers[lx].length-1; wx++) {
              layers[lx][wx+1].x = wx;
            }
            layers[lx].shift();
          }
        }
      }

      layers = stack(d3.range(n).map(function() { return bumpLayer(m); }));

      //- sense = waveData['eSense']['meditation']/100;
      //- bg = color2(sense);

      //- d3.select("body").transition().duration(500).style("background-color", bg);
      // redraw the line, and then slide it to the left
      svg.selectAll("path")
        .data(layers)
          .attr("d", area)
          .attr("transform", null)
        .transition()
          .ease("linear")
      
    }

    function transition2() {
      d3.selectAll("path")
          .data(layers0)
        .transition()
          .duration(2500)
          .attr("d", area);
    }

    // Inspired by Lee Byron's test data generator.
    function bumpLayer(n) {

      function bump(a) {
        var x = 1 / (.1 + Math.random()),
            y = 2 * Math.random() - .5,
            z = 10 / (.1 + Math.random());
        for (var i = 0; i < n; i++) {
          var w = (i / n - y) * z;
          a[i] += x * Math.exp(-w * w);
        }
      }

      var a = [], i;
      for (i = 0; i < n; ++i) a[i] = 0;
      for (i = 0; i < 5; ++i) bump(a);
      return a.map(function(d, i) { return {x: i, y: Math.max(0, d)}; });
    }


  
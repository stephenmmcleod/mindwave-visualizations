extends layout

block content
  .streamgraph
  script(type='text/javascript').
    socket.on('updateMindwave', function (data) {
      if (data['blinkStrength'] == null) {
        waveData = data;
        blinking = false;
      } else {
        blinking = data['blinkStrength'];
      }
      //- console.log(waveData);
      //- console.log(blinking);
      // waveData['eegPower']['delta']
      // waveData['eegPower']['theta']
      // waveData['eegPower']['lowAlpha']
      // waveData['eegPower']['highAlpha']
      // waveData['eegPower']['highBeta']
      // waveData['eegPower']['highBeta']
      // waveData['eegPower']['highGamma']
      // waveData['eegPower']['highGamma']
    });

    var n = 8, // number of layers
        m = 300, // number of samples per layer
        stack = d3.layout.stack().offset("wiggle"),
        layers0 = stack(d3.range(n).map(function() { return bumpLayer(m); })),
        layers1 = stack(d3.range(n).map(function() { return bumpLayer(m); }));


    var width = $(".streamgraph").width(),
        height = $(".streamgraph").height();
    //- var width = 1436,
        //- height = 404;

    var x = d3.scale.linear()
        .domain([0, m - 1])
        .range([0, width]);

    var y = d3.scale.linear()
        .domain([0, d3.max(layers0.concat(layers1), function(layer) { return d3.max(layer, function(d) { return d.y0 + d.y; }); })])
        .range([height, 0]);

    var color = d3.scale.linear()
        .range(["#B2EEF1", "#696C86"]);

    var area = d3.svg.area()
        .x(function(d) { return x(d.x); })
        .y0(function(d) { return y(d.y0); })
        .y1(function(d) { return y(d.y0 + d.y); });

    var svg = d3.select(".streamgraph").append("svg")
        .attr("width", width)
        .attr("height", height);

    svg.selectAll("path")
        .data(layers0)
      .enter().append("path")
        .attr("d", area)
        .style("fill", function() { return color(Math.random()); });

    function transition() {
      d3.selectAll("path")
          .data(function() {
            var d = layers1;
            layers1 = layers0;
            return layers0 = d;
          })
        .transition()
          .duration(2500)
          .attr("d", area);
    }

    // Inspired by Lee Byron's test data generator.
    function bumpLayer(n) {

      function bump(a) {
        var x = 1 / (.1 + Math.random()),
            y = 2 * Math.random() - .5,
            z = 10 / (.1 + Math.random());
        for (var i = 0; i < n; i++) {
          var w = (i / n - y) * z;
          a[i] += x * Math.exp(-w * w);
        }
      }

      var a = [], i;
      for (i = 0; i < n; ++i) a[i] = 0;
      for (i = 0; i < 5; ++i) bump(a);
      return a.map(function(d, i) { return {x: i, y: Math.max(0, d)}; });
    }



    //stuff to scale it to window

    //- $(document).ready(function() {
    //-   $(window).resize(function() {
    //-       if(this.resizeTO) clearTimeout(this.resizeTO);
    //-       this.resizeTO = setTimeout(function() {
    //-           $(this).trigger('resizeEnd');
    //-       }, 500);
    //-   });

    //-   $(window).bind('resizeEnd', function() {
    //-       var height = $("#center").width()/2;
    //-       $("#center svg").css("height", height);
    //-       draw(height);
    //-   });

    //-   function draw(ht) {
    //-       $("#center").html("<svg id='map' xmlns='http://www.w3.org/2000/svg' width='100%' height='" + ht + "'></svg>");
    //-       map = d3.select("svg");
    //-       var width = $("svg").parent().width();
    //-       var height = ht;

    //-       // I discovered that the unscaled equirectangular map is 640x360. Thus, we
    //-       // should scale our map accordingly. Depending on the width ratio of the new
    //-       // container, the scale will be this ratio * 100. You could also use the height 
    //-       // instead. The aspect ratio of an equirectangular map is 2:1, so that's why
    //-       // our height is half of our width.

    //-       projection = d3.geo.equirectangular().scale((width/640)*100).translate([width/2, height/2]);
    //-       var path = d3.geo.path().projection(projection);
    //-       d3.json('plugins/maps/world.json', function(collection) {
    //-           map.selectAll('path').data(collection.features).enter()
    //-               .append('path')
    //-               .attr('d', path)
    //-               .attr("width", width)
    //-               .attr("height", width/2);
    //-       });
    //-   }
    //-   draw($("#center").width()/2);
    //- });
  